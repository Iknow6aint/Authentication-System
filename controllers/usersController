const User = require("../models/User");
const { validationResult } = require("express-validator");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");
const nodemailer = require("nodemailer");
const { decode } = require("jsonwebtoken");
require("dotenv").config();
const { SECRET, EMAIL, PASS } = process.env;

//  @route          POST api/auth/register
// @desc            Register user and get token
// @access          Public
const Register = async(req,res)=>{
    // destructure request body
    const { firstName,lastName ,email,password} = req.body;

    if (!(email && password && first_name && last_name)) {
        res.status(400).send("All input is required");
      }
  
     try {
        let existingUser =await User.findOne({ email });

        if(existingUser){
            return res.status(400).json({statusCode:400,message:"user exists"})
        };
        const salt = await bcrypt.genSalt(10)
        
        const hashedPassword = await bcrypt.hash(password,salt);

        const newUser = await User.create({
            firstName: firstName,
            lastName: lastName,
            email: email,
            password: hashedPassword,
        });

        // create token
        const token = jwt.sign(
            { user_id: newUser._id, email:newUser.email },
            SECRET,
            {
              expiresIn: "2h",
            });
                        
        newUser.token = token
        
        res.status(400).send("wrong token")
     } catch (error) {
        console.log(error.message);
        res.status(402).send('Error')
     }
}


// @route     GET   api/auth
// @desc      Get logged in user
// @access    Private
exports.getLoggedInUser = async (req, res) => {
  try {
    // Get user from dbb
    const user = await User.findById(req.user.id).select("-password");

    // return user
    res.json({
      statusCode: 200,
      message: "user gotten successfully",
      user,
    });
  } catch (err) {
    console.error(err.message);
    res.status(500).send("Server Error");
  }
};

// @route           POST api/auth/login
// @desc            Auth user(user, staff, managers, admin) and get token
// @access          Public
exports.loginUser = async (req, res) => {
  // check for errors
  const errors = validationResult(req);
  if (!errors.isEmpty())
    return res.status(400).json({ errors: errors.array() });

  // else
  // destructure request body
  const { email, password } = req.body;

  try {
    // Initialize user
    let user = await User.findOne({ email });

    if (!user)
      return res.status(400).json({
        statusCode: 400,
        message: "Invalid credentials",
      });

    //else...
    //Check password
    const isMatch = await bcrypt.compare(password, user.password);

    if (!isMatch)
      return res.status(400).json({
        statusCode: 400,
        message: "Invalid credentials",
      });

    // else
    // there's a match, send token, send payload and signed token

    const payload = {
      user: {
        id: user._id,
        firstName: user.firstName,
        lastName: user.lastName,
        email: user.email,
        userRole: user.userRole,
        isAdmin: user.isAdmin,
        isManager: user.isManager,
        isStaff: user.isStaff,
      },
    };

    jwt.sign(
      payload,
      SECRET,
      {
        expiresIn: 3600,
      },
      (err, token) => {
        if (err) throw err;
        res.json({
          statusCode: 200,
          message: "user logged in successfully",
          user: {
            firstName: user.firstName,
            lastName: user.lastName,
            email: user.email,
            userRole: user.userRole,
            isAdmin: user.isAdmin,
            isManager: user.isManager,
            isStaff: user.isStaff,
          },
          token,
        });
      }
    );
  } catch (err) {
    console.error(err.message);
    res.status(500).send("Server Error");
  }
};

// @route     PUT   api/auth/logout
// @desc      logout user
// @access    Private
exports.logoutUser = async (req, res) => {
  // const authHeader = req.headers["Authorization"];
  let splittedHeader = req.header("Authorization").split(" ");
  if (splittedHeader[0] !== "Bearer")
    return res.status(401).json({
      statusCode: 401,
      message: "authorization format is Bearer <token>",
    });

  jwt.sign(splittedHeader[1], "", { expiresIn: 1 }, (logout, err) => {
    if (logout) {
      console.log(logout);
      res.send({ msg: "You have been Logged Out" });
    } else {
      res.send({ msg: "Error" });
    }
  });
};

// @route       PUT api/user/:user_id/update
// @desc        update a registered user
// @access      Private

